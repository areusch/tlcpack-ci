"""Generate yaml configuration given a sketch of the Jenkins cluster config."""

import argparse
import stat
import yaml

from . import jenkins_lib


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate various configs needed to build Jenkins based on a cluster configuration yaml")
    parser.add_argument("--cluster-config", required=True, help="Path to cluster config yaml")
    parser.add_argument("--casc-config", required=True, help="Path to Jenkins Configuration-as-Code yaml, which will be generated by this tool.")
    return parser.parse_args()


def validate_cluster_config(config):
    pass


class UnprotectedCredentialsError(Exception):
    """Raised when credentials are not adequately protected on-disk."""


def generate_casc(cluster):
    config = yaml.safe_load(TEMPLATE_CASC)
    if cluster["mode"] == "prod":
        config["jenkins"]["authorizationStrategy"]["github"] = {
            "adminUserNames": "tqchen, ZihengJiang, merrymercy, icemelon9, jroesch, zhiics, areusch, tnrwil",
            "organizationNames": "",
            "allowAnonymousJobStatusPermission": True,
            "allowAnonymousReadPermission": True,
            "allowCcTrayPermission": False,
            "allowGithubWebHookPermission": False,
            "authenticatedUserCreateJobPermission": False,
            "authenticatedUserReadPermission": True,
            "useRepositoryPermissions": False,
        }
    elif cluster["mode"] == "dev":
        config["jenkins"]["authorizationStrategy"] = "unsecured"

    password_file = jenkins_lib.REPO_ROOT / ".github-token"
    if password_file.exists():
        password_mode = stat.S_IMODE(password_file.stat().st_mode)
        if (password_mode & ~0o600) != 0:
            raise UnprotectedCredentialsError(
                "GH credentials are not well-enough protected "
                f"(mode {password_mode:o}): {password_file}")
    with open(password_file) as password_f:
        token = password_f.read().rstrip("\n")
    config["credentials"] = {
        "system": {
            "domainCredentials": [
                {
                    "credentials": [
                        {
                            "usernamePassword": {
                                "id": "github-credential",
                                "username": cluster["github_username"],
                                "password": "${JENKINS_PASSWORD_GITHUB}",
                                "description": "Credentials used with the GitHub Branch Source Plugin",
                                "scope": "GLOBAL",
                            },
                        },
                    ],
                },
            ],
        },
    }

    config["jenkins"]["nodes"] = []
    for node_name, node_config in cluster["nodes"].items():
        config["jenkins"]["nodes"].append({
            "permanent": {
                "labelString": node_config["label"],
                "launcher": {
                    "jnlp": {
                        "workDirSettings": {
                            "disabled": False,
                            "failIfWorkDirIsMissing": False,
                            "internalDir": "remoting",
                        },
                    },
                },
                "name": node_name,
                "nodeDescription": node_config["hostname"],
                "numExecutors": 1,
                "remoteFS": "/home/jenkins",
                "retentionStrategy": "always",
          }
      })

    return config


def main():
    args = parse_args()

    with open(args.cluster_config) as f:
        cluster = yaml.safe_load(f)
    validate_cluster_config(cluster)

    casc = generate_casc(cluster)
    casc_str = yaml.dump(casc)
    with open(args.casc_config, "w") as casc_f:
        casc_f.write(casc_str)


if __name__ == "__main__":
    main()
